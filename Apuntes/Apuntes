APUNTES JAVASCRIPT

Mostrar pop up con un mensaje
dentro del script, utilizamos "alert("mensaje");" para mostrar un mensaje

Utilizar archivo externo JS
dentro del html (preferentemente dentro del HEAD) llamamos el archivo js a travez de la etiqueta script y atributo src
	<script type="text/javascript" src="hola_mundo.js"></script>

Mostrar datos en la consola del navegador
podemos mostrar datos harkodeados, variables, resultados de operaciones, etc
	"console.log('lo que sea');"

VARIABLES
contenedores de datos. utilizamos la palabra "VAR" para declarar cualquier tipo de variable(int, string, etc)
podemos concatenar varias variables utilizando "+".
	var pais_continente = pais + " " + continente;

MODO ESTRICTO
modo que nos obliga que programemos con mejores practicas y activa funcionalidades nuevas. para activarlas
tipeamos 'use strict' al principio. Util para que nuestro codigo se adecue a los ultimos estandares.

ULTIMOS ESTANDARES
un ejemplo es que tenemos 2 formas de definir una variable: con VAR y con LET.
Diferencia: LET: permite definir variables limitando su alcance al bloque donde se esta usando
			VAR: permite definir variables de manera global.

Constantes: variable que contiene un dato que no va a poder ser modificado nunca.
	ej: const nombre = "valor";

Tipos de variables: -enteros = 22
					-flotante/decimal = 10.5
					-boleano = true/false
					-cadena de texto = "hola pepito"
					
Metodos:-Number = funcion que castea un numero que es una cadena de texto. Esta funcion puede convertirla en un 					numero entero, flotante o decimal. ej: console.log(Number("10.5"));
		-String = convierte cualquier tipo de numero en una cadena de texto.
		ej: console.log(String(10));
		-typeof = detecta el tipo de variable que es la que vamos a usar.
		ej: console.log(typeof "variableNumero");


FIJAR PUNTO DE INTERRUPCION
escribiendo la palabra "debugger" dentro de nuestro codigo pondremos un punto de interrupcion para poder frenar y debugguear nuestra pag. web.

ALERTAS, VENTANAS DE SELECCION Y POP UP DE INGRESO DE DATOS
dentro de nuestra pag web podemos crear pop ups para mostrar algun mensaje, pedir confirmacion, etc:
-ALERTA (mensaje) = alert("texto a mostrar");
-CONFIRMACION(preg de confirmacion) = confirm("texto de nuestra confirmacion"); 
 si queremos obtener el valor de la respuesta, debemos asignar este confirm a una variable
    var respuesta = confirm("¿Estas seguro de querer continuar?");
-INGRESO DE DATOS = prompt("texto del popup", "valor predeterminado");
 esta ventana nos permite ingresar algun dato y setearle un valor predeterminado en el caso de que no se complete en el segundo parametro. Podemos tomar el valor de la misma forma que con la confirmacion.

 VERIFICAR QUE SEA UN NUMERO
 dentro de una condicion, para verificar si el dato que ingresa
 el usuario es numérico, lo hacemos con la sentencia "isNaN(Variable)". esto nos devolvera un true cuando ingresamos un caracter en un campo que espera recibir numero.

FUNCIONES
una funcion es una agrupacion reutilizable de un conjunto de instrucciones que podemos utilizar tantas veces como queramos
Dentro de estas funciones podemos llamar a otras funciones si lo deseamos.
Estas tambien pueden recibir parametros con desde su invocación.

PARAMETROS REST
si tenemos una funcion que recibe 2 parametros, y le pasamos mas de esa cantidad, al momento de mostrar, veremos que mostrara los dos primeros. Esto no es lo indicado. debemos mostrar todos los parametros. Para esto, en la declaracion de la funcion, luego de los primeros 2 parametros, creamos uno mas el cual debe iniciar con "..." y el nombre del parametro. esto hace que reciba todos los demas de forma de array.
 ej:	function lista_frutas(fruta_1, fruta_2, ...frutas_restantes){
 			.....
 		}


 FUNCIONES ANONIMAS
 es una funcion que no tiene nombre y se puede guardar dentro de una variable.
 utilizada para hacer Callback (funcion que se ejecuta dentro de otro).

 FUNCIONES DE FLECHA
 forma de definir funciones de CallBack mas prolija y corta.
 Simplemente se escribe el parametros y =>. si lleva un parametro no es necesario
 poner los parentecis. si son mas SI.
 	EJ: sumame(1, 5, dato => {....logica de funcion....});


FUNCIONES PARA TEXTOS
 -toString() = convierte cualquier tipo de dato en string.
 -toUpperCase() = convierte el texto a todo en mayuscula.
 -toLowerCase() = convierte el texto a todo en minuscula.
 -length = me devuelve la cantidad de caracteres de un texto.
 -concat = permite concatenar textos (util para hacerlo dentro de un bucle).
 -indexOf("texto") = devuelve la posicion en la que encuentra la primera coincidencia
 					 del texto
 -lastIndexOf("texto") = devuelve la posicion en la que encuentra la ultima 
 						 coincidencia del texto
 -search("texto") = lo mismo que el indexOf.
 -match("texto") = devuelve un array con la palabra, la posicion, el texto completo,
 				   y demas datos
 	poniendo el texto entre barras (/texto/g) nos devolvera el array con todas las coincidencias.
 -substr(posicion, cantcaracteres) = toma los caracteres que estan desde el numero de posicion y hasta la cantidad de caracteres que se ingrese en el segundo parametro.
 -charAt(posicion) = devuelve el caracter que esta en la posicion ingresada.
 -startsWith("texto") = busca al inicio del string si existe el texto ingresado y 
 						devuelve true o false.
 -endsWith("texto") = busca al final del string si existe el texto ingresado y 
 					  devuelve true o false.
 -include("texto") = busca dentro de la cadena de textos el texto ingresado y retorna 
 					 true o false.
 -replace("texto1", "texto2") = reemplaza el 1er texto en el parametro por el segundo
 								en una cadena de texto.
 -slice(posInicio, posFin) = devuelve en un string todo el texto a partir de la 
 							 posicion marcada. Puede ponerse un fin al corte tambien.
 -split(" ") = corta el texto en el caracter que le pasemos y lo guarda en un array. si
 			   le pasamos un espacio, va a separar todas las palabras y las va a 
 			   guardar a todas en el array.
 -trim() = quita los espacios por delante y por detras de la cadena de caracteres