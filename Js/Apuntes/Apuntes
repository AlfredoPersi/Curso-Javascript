APUNTES JAVASCRIPT

Mostrar pop up con un mensaje
dentro del script, utilizamos "alert("mensaje");" para mostrar un mensaje

Utilizar archivo externo JS
dentro del html (preferentemente dentro del HEAD) llamamos el archivo js a travez de la etiqueta script y atributo src
	<script type="text/javascript" src="hola_mundo.js"></script>

Mostrar datos en la consola del navegador
podemos mostrar datos harkodeados, variables, resultados de operaciones, etc
	"console.log('lo que sea');"

VARIABLES
contenedores de datos. utilizamos la palabra "VAR" para declarar cualquier tipo de variable(int, string, etc)
podemos concatenar varias variables utilizando "+".
	var pais_continente = pais + " " + continente;

MODO ESTRICTO
modo que nos obliga que programemos con mejores practicas y activa funcionalidades nuevas. para activarlas
tipeamos 'use strict' al principio. Util para que nuestro codigo se adecue a los ultimos estandares.

ULTIMOS ESTANDARES
un ejemplo es que tenemos 2 formas de definir una variable: con VAR y con LET.
Diferencia: LET: permite definir variables limitando su alcance al bloque donde se esta usando
			VAR: permite definir variables de manera global.

Constantes: variable que contiene un dato que no va a poder ser modificado nunca.
	ej: const nombre = "valor";

Tipos de variables: -enteros = 22
					-flotante/decimal = 10.5
					-boleano = true/false
					-cadena de texto = "hola pepito"
					
Metodos:-Number = funcion que castea un numero que es una cadena de texto. Esta funcion puede convertirla en un 					numero entero, flotante o decimal. ej: console.log(Number("10.5"));
		-String = convierte cualquier tipo de numero en una cadena de texto.
		ej: console.log(String(10));
		-typeof = detecta el tipo de variable que es la que vamos a usar.
		ej: console.log(typeof "variableNumero");


FIJAR PUNTO DE INTERRUPCION
escribiendo la palabra "debugger" dentro de nuestro codigo pondremos un punto de interrupcion para poder frenar y debugguear nuestra pag. web.

ALERTAS, VENTANAS DE SELECCION Y POP UP DE INGRESO DE DATOS
dentro de nuestra pag web podemos crear pop ups para mostrar algun mensaje, pedir confirmacion, etc:
-ALERTA (mensaje) = alert("texto a mostrar");
-CONFIRMACION(preg de confirmacion) = confirm("texto de nuestra confirmacion"); 
 si queremos obtener el valor de la respuesta, debemos asignar este confirm a una variable
    var respuesta = confirm("¿Estas seguro de querer continuar?");
-INGRESO DE DATOS = prompt("texto del popup", "valor predeterminado");
 esta ventana nos permite ingresar algun dato y setearle un valor predeterminado en el caso de que no se complete en el segundo parametro. Podemos tomar el valor de la misma forma que con la confirmacion.

 VERIFICAR QUE SEA UN NUMERO
 dentro de una condicion, para verificar si el dato que ingresa
 el usuario es numérico, lo hacemos con la sentencia "isNaN(Variable)". esto nos devolvera un true cuando ingresamos un caracter en un campo que espera recibir numero.

FUNCIONES
una funcion es una agrupacion reutilizable de un conjunto de instrucciones que podemos utilizar tantas veces como queramos
Dentro de estas funciones podemos llamar a otras funciones si lo deseamos.
Estas tambien pueden recibir parametros con desde su invocación.

PARAMETROS REST
si tenemos una funcion que recibe 2 parametros, y le pasamos mas de esa cantidad, al momento de mostrar, veremos que mostrara los dos primeros. Esto no es lo indicado. debemos mostrar todos los parametros. Para esto, en la declaracion de la funcion, luego de los primeros 2 parametros, creamos uno mas el cual debe iniciar con "..." y el nombre del parametro. esto hace que reciba todos los demas de forma de array.
 ej:	function lista_frutas(fruta_1, fruta_2, ...frutas_restantes){
 			.....
 		}


 FUNCIONES ANONIMAS
 es una funcion que no tiene nombre y se puede guardar dentro de una variable.
 utilizada para hacer Callback (funcion que se ejecuta dentro de otro).

 FUNCIONES DE FLECHA
 forma de definir funciones de CallBack mas prolija y corta.
 Simplemente se escribe el parametros y =>. si lleva un parametro no es necesario
 poner los parentecis. si son mas SI.
 	EJ: sumame(1, 5, dato => {....logica de funcion....});


FUNCIONES PARA TEXTOS
 -toString() = convierte cualquier tipo de dato en string.
 -toUpperCase() = convierte el texto a todo en mayuscula.
 -toLowerCase() = convierte el texto a todo en minuscula.
 -length = me devuelve la cantidad de caracteres de un texto.
 -concat = permite concatenar textos (util para hacerlo dentro de un bucle).
 -indexOf("texto") = devuelve la posicion en la que encuentra la primera coincidencia
 					 del texto
 -lastIndexOf("texto") = devuelve la posicion en la que encuentra la ultima 
 						 coincidencia del texto
 -search("texto") = lo mismo que el indexOf.
 -match("texto") = devuelve un array con la palabra, la posicion, el texto completo,
 				   y demas datos
 	poniendo el texto entre barras (/texto/g) nos devolvera el array con todas las coincidencias.
 -substr(posicion, cantcaracteres) = toma los caracteres que estan desde el numero de posicion y hasta la cantidad de caracteres que se ingrese en el segundo parametro.
 -charAt(posicion) = devuelve el caracter que esta en la posicion ingresada.
 -startsWith("texto") = busca al inicio del string si existe el texto ingresado y 
 						devuelve true o false.
 -endsWith("texto") = busca al final del string si existe el texto ingresado y 
 					  devuelve true o false.
 -include("texto") = busca dentro de la cadena de textos el texto ingresado y retorna 
 					 true o false.
 -replace("texto1", "texto2") = reemplaza el 1er texto en el parametro por el segundo
 								en una cadena de texto.
 -slice(posInicio, posFin) = devuelve en un string todo el texto a partir de la 
 							 posicion marcada. Puede ponerse un fin al corte tambien.
 -split(" ") = corta el texto en el caracter que le pasemos y lo guarda en un array. si
 			   le pasamos un espacio, va a separar todas las palabras y las va a 
 			   guardar a todas en el array.
 -trim() = quita los espacios por delante y por detras de la cadena de caracteres.


 PLANTILLAS
 javascript nos permite ingresar textos grandes multilineas y demas, a traves de las plantillas. Dentro de estas plantillas podemos ingresar codigo html(h1, h3, etc) y podemos poner variables(${variable}) y mostrarlas en forma de textos. La forma de usarlo es con las comillas invertidas:
  un ejemplo es:
 	var texto = `
 	 	<h1>Hola que tal</h1>
 	 	<h3>Mi nombre es: ${nombre}<h3/>
 	 	<h3>Mi apellido es: ${apellido}<h3/>
 	`;


ARRAYS - FORMAS DE RECORRERLO
-FOREACH: en este for debemos si o si pasar el elemento ya que va a ser cada uno de los que estan dentro del array que vamos a recorrer. Tambien podemos pasar un indice para saber en que posicion esta, y un parametro array para que lo muestre todo.
 "array".forEach(elemento, indice, array)=>{
	...logica...
 }


ARRAYS - METODOS
 -push(elemento) = agrega un elemento al array
 -pop(elemento) = quita un elemento del array. Si no le pasamos argumetento, borra el 
 				  ultimo.
 -indexOf(elemento) = devuelve la posicion del elemento en el array.
 -splice(indice, x) = permite borrar a partir de una posicion(indice) tantas posiciones 
 					  en adelante(x)
 -join() = convierte el array en un string separados por ','.
 -sort() = ordena el array por orden alfabético.
 -reverse() = ordena el array al reves.
 -find(function(elemento)){} = busca si esta el elemento que comparemos dentro de la 
 							 funcion. Este metodo retorna lo que buscamos si existe.
 							 Caso contrario retorna undefined.
 -findIndex(function(elemento)){} = nos devolvera el indice donde se encuentra el
 									elemento que buscamos.
 -some(function(elemento)){} = busca si hay elementos menor o mayor a la condicion que
 							   pongamos en la funcion. devuelve true o false.


DOM - Document Object Model
Es el arbol de etiquetas y elementos que componen una web (el body, el p, etc).
a traves del dom, podemos modificar las etiquetas HTML, podemos seleccionar los elementos y manipularlos como queramos.
NOTA: se recomienda importar el archivo JS al final del body, ya que si se quiere manipular un elemento de la pagina, al estar encima, se ejecuta primero el js y va a dar como que no esta definido un elemento. poniendolo al final, primero se ejecuta el HTML y el JS va a encontrar todos los elementos que vaya a usar.

METODOS DEL DOM
-getElementById("Id del elemento") = devuelve el elemento HTML.
-getElementById("Id del elemento").innerHTML = devuelve el elemento pero si su HTML. Con
				este innerHTML tambien podemos cambiar el contenido del elemento.
-getElementsByTagName("nombreTag") = devuelve en un array todos los elementos con el nombre del tag que pasemos.
-getElementsByClassName("class nombre") = devuelve en un array todos los elementos con el class que pasemos.
-querySelector("#idElemento") = devuelve el elemento HTML. Con este selector podemos 
				traer el elemento a traves del class(".NombreClass") o todos los elementos del mismo tipo ("elemento"). Este solo nos traera un elemento.
-querySelectorAll ("clase/id/elemento") = devuelve un nodeList (es igual a un array) con todos los elementos que
				estan en la web y coincidan con los id, class o tags que pasemos.
-style = nos permite modificar el elemento agregando codigo CSS.
-className = permite modificar el nombre del class del elemento.

-elemento[x].textContent = devuelve el texto que contiene un elemento que ya traimos.
-createElement("elemento") = crea un elemento HTML desde Javascript
-createTextNode("string") = crea un nodo con un texto al cual podemos insertar dentro de una etiqueta HTML
-appendChild(varNodo) = inserta el nodo que creamos antes dentro de una etiqueta para poder mostrarlo en el DOC.
						Tambien sirve para insertar un elemento HTML dentro de otro.
-append(elemento) = mismo que el anterior. no es necesario poner el Child al append.
-prepend(elemento) = inserta un elemento HTML antes del elemento que queramos.


BOM - Browser Object Model
Permite acceder y modificar las propiedades de las ventanas del propio navegador. Mediante el BOM podemos redimensionar y mover la ventana del navegador, modificar el texto que se muestra en la barra de estado y muchas otras manipulaciones no relacionadas con el contenido de la página HTML.

METODOS DEL BOM
-window.innerHeight = devuelve el alto de la pantalla en px.
-window.innerWidth = devuelve el ancho de la pantalla en px.
-screen.width = devuelve el ancho de la pantalla en px.
-screen.height = devuelve el alto de la pantalla en px.
-window.location = devuelve un array con toda la info de la URL (direccion, href, etc).
 	 todos estos datos podemos modificarlos, por ej. cambiar el href para que nos
	 redirija a otra pagina al llamarlo desde una funcion.
-window.open(url) = abre una pestaña nueva en el navegador con al url ingresada. Pasando
	los parametros ("", "width=XXX, height=XXX") nos abrira una nueva ventana con
	las medidas ingresadas.


EVENTOS
son funciones que se ejecutan cada vez que suceden algo (cuando el usuario da un click, mueve el raton, redimenciona el navegador, etc.).

EJEMPLOS DE EVENTOS desde HTML
-onclick = es cuando el usuario da un click sobre el elemento.
-ondblclick = es cuando el usuario hace doble click sobre elemento.

EJEMPLOS DE EVENTOS desde JAVASCRIPT
addEventListener("evento", funcion(){logica funcion}) = este metodo se encarga de tomar
los eventos que se van produciendo. Antes de esto, debemos obtener el elemento
HTML y guardarlo en una variable.
Ejemplos: -click (al hacer click en un elemento)
		  -mouseover (al pasar el puntero por encima de un elemento)
		  -mouseout (al sacar de encima de un elemento el puntero)
		  -focus (al hacer foco en un elemento)
		  -blur (sacar el foco de un elemento)
		  -keydown (al precionar una tecla del teclado) 
		  -keypress (devuelve la tecla presionada)
		  -keyup (captura el evento al soltar una tecla)
		  -load (evento que se lanza cuando ya se cargan todos los elementos HTML. este evento se pone al principio del archivo js. 
		  	ej: window.addEventListener('load', function(){.......});)


TIMERS
nos permiten ejecutar una logica cada cierta cantidad de tiempo.
-setInterval(function(){...}, tiempo) = con el hacemos que se ejecute la logica dentro
			de la funcion cada sierto intevalo de tiempo. Este se mide en milisegundos.
-setTimeOut(function(){...}, tiempo) = se va a ejecutar solo una vez en el tiempo que
			le indiquemos.


THIS
El operador THIS sirve para hacer referencia al objeto con el que estamos interactuando. por ejemplo en un 
evento, si damos click a un boton y queremos que cambien alguna propiedad o estilo, no es necesario hacer
un querySelector para llamar al boton. Utilizando THIS podemos llamarlo mas facilmente.


JSON
nos permite crear objetos de manera sencilla. Esta clase de obtejos son array asociativos y nos permite estructurar los datos.
METODOS:
-JSON.stringify("objeto") = convierte un objeto json en un objeto string de json.
		Hay que utilizarlo cada vez que se desee enviar el objeto o guardarlo en el LS.
-JSON.parse("objeto") = convierte un objeto string de json a un objeto json.
		Hay que utilizarlo luego de recuperar un objeto string de JSON para poder tratarlo.

LOCAL STORAGE
es una forma de almacenar informacion dentro del navegador y que persista mientras voy navegando en la pagina. Es como una especie de sesion.
METODOS:
 -localStorage.setItem("titulo", "valor") = guarda un dato normal (string).
 -localStorage.getItem("titulo") = recupera el valor que contenga el titulo.

 FETCH
 Metodo que nos permite hacer peticiones a Ajax.
 Una peticion Ajax es una llamada a un servicio REST.
 Con este metodo podemos obtener datos de un backend (servicio) y mostrarla en nuestra pagina web.
 Tambien podemos encadenar varias promesas(FETCH) seguidas y asi llamar a varios servicios a la vez.

 PROMESAS
 En js podemos crear nuestra propia promesa para obtenerla con FETCH y utilizarla para mostrar los datos que devuelve.

 CAPTURAR ERRORES EN PROMESAS
 Para poder capturar un error o excepsion en un fetch, debemos agregar un Catch.
 Con este podemos realizar una funcion de callback y dentro que muestre el error
 por consola y podemos escribir un mensaje.

 CAPTURAR ERRORES EN EL CODIGO
 Se puede usar el Try-Catch, el cual se encargara de tomar los errores y 
 exsepciones. De esta forma podemos controlar que queremos que haga cuando suceda
 un error.

 FECHAS
 Para poder usar la fecha debemos usar el new Date();
 Con esto obtendremos la fecha actual y podremos usar varios metodos:
 ej:
 -getFullYear() = devuelve el año actual
 -getMonth() = devuelve el mes actual
 -getDate() = devuelve el dia actual
 -getHours() = devuelve la hora actual
 -getMinutes() = devuelve el minuto actual

 FUNCIONES MATEMATICAS
 Javascript tiene muchos metodos que podemos utilizar a traves de Math.
 Estos los podemos encontrar en google poniendo "Javascript Math".
 EJ mas usados:
 -Math.max = devuelve el maximo en un array.
 -Math.min = devuelve el minimo en un array.
 -Math.random = devuelve 0 o 1
 -Math.ceil = redondea un numero decimal

 